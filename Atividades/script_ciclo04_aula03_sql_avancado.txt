-- Atividade ciclo 04 aula 03 sql avancado

/*1. Criar uma consulta que liste a categoria, o id do produto, o preço e
classificação de cada produto dentro da sua categoria, com base no preço
no seu preço médio.*/

SELECT
	categoria,
	product_id,
	preco,
	DENSE_RANK() OVER ( PARTITION BY categoria
ORDER BY
	preco DESC ) AS classificacao
FROM
	(
	SELECT
		p.product_id,
		p.product_category_name AS categoria,
		AVG(oi.price) AS preco
	FROM
		order_items oi
	LEFT JOIN products p ON
		(oi.product_id = p.product_id)
	WHERE p.product_category_name IS NOT NULL 
	GROUP BY
		p.product_id
	HAVING
		p.product_category_name IS NOT NULL
) AS t1

/*2. Crie uma consulta que exiba a data de compra, o valor de cada
venda e o total acumulado de vendas até aquela data.*/

SELECT 
	   o.order_purchase_timestamp AS data_de_compra,
	   oi.price,
	   SUM(oi.price) OVER (
	ORDER BY o.order_purchase_timestamp) AS total_acumulo
FROM 
	 orders o
LEFT JOIN order_items oi ON
	(o.order_id = oi.order_id)
WHERE 
	 oi.price IS NOT NULL AND oi.order_item_id  = 1

/*3. Crie uma consulta que exiba a data de compra, o valor de cada
venda e a média móvel dos últimos três valores de venda incluindo o valor
atual*/

SELECT o.order_purchase_timestamp AS data_compra,
	   oi.price,
	   AVG(oi.price) OVER (ORDER BY o.order_purchase_timestamp
	   					   ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) AS media_movel	
FROM orders o LEFT JOIN order_items oi ON (o.order_id = oi.order_id)
WHERE oi.price IS NOT NULL

/*4. Crie uma consulta que lista a data da compra, o número de produtos
vendidos e o crescimento das vendas com relação ao dia anterior.*/

SELECT t1.data_compra,
	   t1.compras_por_dia,
	   t1.compras_por_dia - LAG(t1.compras_por_dia) OVER (ORDER BY DATE(t1.data_compra)) AS compras_em_relacao_ao_dia_anterior
FROM (SELECT
	DATE(o.order_purchase_timestamp) AS data_compra,
	COUNT(o.order_id) AS compras_por_dia
FROM
	orders o
GROUP BY
	DATE(o.order_purchase_timestamp)) AS t1
GROUP BY t1.data_compra

/*5. Crie uma consulta que exiba o estado do cliente, a categoria, a
quantidade de produtos vendidos e o percentual de vendas em relação ao
total vendido no estado.*/



-- tentativas falhas de resolver
SELECT c.customer_state,
	   p.product_category_name,
	   COUNT(oi.order_id) AS quantidade_vendida,
	   COUNT(oi.order_id)/(SELECT COUNT( oi2.order_id) 
	   						   FROM order_items oi2) AS percentual_venda
FROM orders o LEFT JOIN order_items oi ON (o.order_id=oi.order_id)
			  LEFT JOIN products p ON (oi.product_id=p.product_id)
			  LEFT JOIN customer c ON (o.customer_id=c.customer_id)
GROUP BY c.customer_state


-- solução meigarom (errada)
SELECT
	state,
	categoria,
	produtos,
	(SELECT COUNT(p2.product_id) 
	 FROM order_items oi2 LEFT JOIN products p2 ON (oi2.product_id=p2.product_id)
	 GROUP BY p2.product_category_name
	 HAVING p2.product_category_name IS NOT NULL) AS total_por_categoria,
	 produtos/(SELECT COUNT(p2.product_id) 
	 FROM order_items oi2 LEFT JOIN products p2 ON (oi2.product_id=p2.product_id)
	 GROUP BY p2.product_category_name
	 HAVING p2.product_category_name IS NOT NULL) AS percentual
FROM
	(
	SELECT
		c.customer_state AS state,
		p.product_category_name AS categoria,
		COUNT( oi.product_id ) AS produtos
	FROM
		orders o
	LEFT JOIN order_items oi ON
		( oi.order_id =
o.order_id )
	LEFT JOIN products p ON
		( p.product_id =
oi.product_id )
	LEFT JOIN customer c ON
		( c.customer_id =
o.customer_id )
	GROUP BY
		c.customer_state
	HAVING
		p.product_category_name IS NOT NULL
)


SELECT product_id,categoria, SUM(total_produto_vendido_categoria) AS total_categoria,
	   COUNT(product_id)*100/SUM(total_produto_vendido_categoria) 
FROM 
(
SELECT p2.product_id,p2.product_category_name AS categoria ,COUNT(p2.product_id) AS total_produto_vendido_categoria
	 FROM order_items oi2 LEFT JOIN products p2 ON (oi2.product_id=p2.product_id)
	 GROUP BY p2.product_category_name, oi2.product_id
	 HAVING p2.product_category_name IS NOT NULL
)