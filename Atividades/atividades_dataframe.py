# -*- coding: utf-8 -*-
"""Atividades_dataframe.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jcVpM9j8WCqy4u7C_bcMVb_J3Xa_fjNi

# Imports e file upload
"""

import pandas as pd
from google import colab as cl

file_upload = cl.files.upload()

"""# Read"""

df = pd.read_csv('train.csv')
df.head()

"""# Limpeza de dados"""

# Limpeza dos dados para melhorar o uso da base de dados
# Conversão da coluna Delivery_person_Age de string para int
df['Delivery_person_Age'] = pd.to_numeric(df['Delivery_person_Age'],errors='coerce') # Converte a coluna 'delivery_person_age' para float e coloca 'NaN' para qualquer valor diferente de número
df.dropna(subset=['Delivery_person_Age'],inplace=True) # Remove as linhas que tiver 'NaN'
df['Delivery_person_Age'] = df['Delivery_person_Age'].astype('int8') # Transforma o tipo de float para int8
# print(df['Delivery_person_Age'].dtypes)

# Conversão da coluna Delivery_person_Ratings de string para float
df['Delivery_person_Ratings'] = pd.to_numeric(df['Delivery_person_Ratings'],errors='coerce') # Converte a coluna 'delivery_person_ratings' para float e coloca 'NaN' para qualquer valor diferente de número
df.dropna(subset=['Delivery_person_Ratings'],inplace=True) # Remove as linhas que tiver 'NaN'
df['Delivery_person_Ratings'] = df['Delivery_person_Ratings'].astype('float16') # Transforma o tipo de float para float16
# print(df['Delivery_person_Ratings'].dtypes)

# Conversão da coluna Order_Date de string para datetime
df['Order_Date'] = pd.to_datetime(df['Order_Date'],format='%d-%m-%Y')
# print(df['Order_Date'].dtypes)

# Conversão da coluna multiple_deliveries de string para int
df['multiple_deliveries'] = pd.to_numeric(df['multiple_deliveries'],errors = 'coerce') # Converte a coluna 'multiple_deliveries' para float e coloca 'NaN' para qualquer valor diferente de número
df.dropna(subset=['multiple_deliveries'], inplace=True) # Remove as linhas que tiver 'NaN'
df['multiple_deliveries'] = df['multiple_deliveries'].astype('int8') # Transforma de float para int8
# print(df['multiple_deliveries'].dtypes)

# Remover espaços em branco no final das strings de algumas colunas
df['ID'] = df['ID'].str.strip()
df['Road_traffic_density'] = df['Road_traffic_density'].str.strip()
df['Type_of_order'] = df['Type_of_order'].str.strip()
df['Type_of_vehicle'] = df['Type_of_vehicle'].str.strip()
df['City'] = df['City'].str.strip()

"""# Primera Atividade

"""

# Primeiras ativdades de dataframe
# 1. Qual o valor da informação armazenada na linha 30 e na coluna 10?
df.iloc[30, 10]

# 2. Selecione as linhas 0 a 20 e as colunas 0 a 2
df.iloc[0:21,0:3]

# 3. Selecione as linhas 5 até 30 e somente a coluna 'Delvery_person_Age'
df.loc[5:30,['Delivery_person_Age']]

# 4. Selecione as linhas 40 a 42 e as seguintes colunas: “Restaurant_latitude”,“Restaurant_longitude”, "Delivery_location_latitude”,“Delivery_location_longitude”
df.loc[40:42,['Restaurant_latitude','Restaurant_longitude','Delivery_location_latitude','Delivery_location_longitude']]

# 5. Qual a menor data de entrega da coluna “Order_Date” entre as linhas 0 a 50?
aux = df.loc[:50,['Order_Date']]
aux.min()

# 6. Qual a menor data de entrega da coluna “ Time_Orderd ” entre as linhas 0 a 50?
aux = df.loc[:50,['Time_Orderd']]
aux.min()

# 7. Quais os nomes únicos da coluna “City” entre as linhas 50 e 70?
df.loc[50:70,'City'].unique().tolist()

# 8. Quais os nomes únicos da coluna “Weatherconditions” entre as linhas 0 e 10?
df.loc[:10,'Weatherconditions'].unique().tolist()

# 9. Quais os tipos de densidade de trânsito presente na coluna “Road_traffic_density ” entre as linhas 0 a 20?
df.loc[:20,'Road_traffic_density'].unique().tolist()

# 10. Qual o ID do entregador de comida mais velho entre as colunas 50 e 70?
aux = df.loc[50:70,['Delivery_person_Age']]
aux.max()

# 11. Qual o ID do entregador de comida com a melhor avaliação de entrega entre as colunas 50 e 70?
df1 = df.loc[50:70,['ID','Delivery_person_Ratings']]
df1.loc[df1['Delivery_person_Ratings'].idxmax(),'ID']

# 12. Quais os tipos de veículos utilizados pelos entregadores entre as linhas 0 a 30?
print(df.loc[:30,'Type_of_vehicle'].unique().tolist())

# 13. Quais os tipos de pedidos único que foram entregues entre as colunas 100 e 120?
df.loc[100:120,'Type_of_order'].unique().tolist()

"""# Segunda Atividade"""

# Mais atividades do uso de dataframes
# 1. Qual o número total de entregadores cadastrados na base de dados?
delivery_people_count = df['Delivery_person_ID'].count()
# print(delivery_people_count)

# 2. Qual o número total de entregadores únicos cadastrados na base de dados?
delivery_people_unique = df['Delivery_person_ID'].nunique()
# print(delivery_people_unique)

# 3. Qual a média de idade dos entregadores por cidade?
# print('Média agrupada por cidade\n',df.groupby('City')['Delivery_person_Age'].mean(),'\n')

# 4. Qual a mediana de idade dos entregadores por cidade?
# print('Mediana agrupada por cidade\n',df.groupby('City')['Delivery_person_Age'].median(),'\n')

# 5. Qual o número total de entregas feitas por densidade de tráfego?
# print('Quantidade de entregas realizadas por densidade de tráfego\n',df.groupby('Road_traffic_density')['ID'].count())

# 6. Qual a média das avaliações das entregas feitas por densidade de tráfego?
# print('Média de avaliações agrupada por densidade de tráfego\n',df.groupby('Road_traffic_density')['Delivery_person_Ratings'].mean())

# 7. Qual a quantidade de entregas feitas por cidade?
print('Quantidade de entregas feitas por cidade\n',df.groupby('City')['ID'].count())