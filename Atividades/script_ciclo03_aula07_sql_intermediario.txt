-- Atividade ciclo 03 aula 07 sql intermediario

-- analise das tabelas do banco de dados

-- tabela customers 

SELECT COUNT(c.customer_id) 
FROM customer c 
GROUP BY c.customer_id 
HAVING COUNT(c.customer_id) > 1 

/* O resultado da query a cima é vazio, indicando que não há duplicidade de customer_id*/

-- tabela geolocation 

SELECT g.geolocation_zip_code_prefix,
	   COUNT(g.geolocation_zip_code_prefix)
FROM geolocation g 
GROUP BY g.geolocation_zip_code_prefix 
HAVING COUNT(g.geolocation_zip_code_prefix) > 1 

SELECT *
FROM geolocation g 
WHERE g.geolocation_zip_code_prefix = '1001'

/* analisando o zip code, é visto que o que difere as linhas são as colunas de 
latidude e longitude
*/

SELECT COUNT(DISTINCT g.geolocation_lat),
	   COUNT(DISTINCT g.geolocation_lng)
FROM geolocation g 
GROUP BY g.geolocation_lat, g.geolocation_lng 
HAVING COUNT(DISTINCT g.geolocation_lat) + COUNT(DISTINCT g.geolocation_lng) > 2

/* A query a cima verifica se há, latidudes e longitudes iguais. Como nenhum
resultado é mostrado, não há valores iguais para essas colunas*/

-- tabela order_items 

SELECT COUNT(oi.order_id) 
FROM order_items oi  
GROUP BY oi.order_id  
HAVING COUNT(oi.order_id) > 1 

/* O resultado da query a cima não é vazio, indicando que há duplicidade de order_id
na tabela order_items*/

SELECT oi.order_id,
	   COUNT(oi.order_id) 
FROM order_items oi  
GROUP BY oi.order_id  
HAVING COUNT(oi.order_id) > 1 

SELECT * 
FROM order_items oi 
WHERE oi.order_id = '001ab0a7578dd66cd4b0a71f5b6e1e41'

/* Com auxilio das duas queries a cima, percebe-se que a coluna que se difere é 
order_item_id. */

-- tabela order_payments

SELECT COUNT(op.order_id) 
FROM order_payments op 
GROUP BY op.order_id  
HAVING COUNT(op.order_id) > 1 

/* O resultado da query a cima não é vazio, indicando que há duplicidade de order_id
na tabela order_payments*/

SELECT op.order_id,
	   COUNT(op.order_id) 
FROM order_payments op 
GROUP BY op.order_id  
HAVING COUNT(op.order_id) > 1 

SELECT *
FROM order_payments op 
WHERE op.order_id = '009ac365164f8e06f59d18a08045f6c4'

SELECT o.order_id,
	   op.payment_sequential,
	   op.payment_installments,
	   op.payment_type,
	   op.payment_value,
	   o.customer_id 
FROM orders o LEFT JOIN order_payments op ON (o.order_id = op.order_id)
WHERE o.order_id = '009ac365164f8e06f59d18a08045f6c4'

/* apos a analise, as colunas op.payment_sequential, op.payment_type e op.payment_value 
podem variar. Acredito ser possivel paagr um unico pedido com diversas formas de pagamento
gerando valores diferentes para cada uma delas, por mais que seja em uma única parcela*/

-- tabela orders_reviews

SELECT COUNT(or2.review_id) 
FROM order_reviews or2  
GROUP BY or2.review_id 
HAVING COUNT(or2.review_id) > 1 

SELECT COUNT(or2.order_id) 
FROM order_reviews or2  
GROUP BY or2.order_id  
HAVING COUNT(or2.order_id) > 1

/*tanto review_id quanto order_id repetem dentro da tabela*/

SELECT or2.review_id ,
	   COUNT(or2.review_id) 
FROM order_reviews or2  
GROUP BY or2.review_id 
HAVING COUNT(or2.review_id) > 1

SELECT or2.*,
	   o.customer_id
FROM order_reviews or2 LEFT JOIN orders o ON (or2.order_id = o.order_id)
WHERE or2.review_id = 'f4bb9d6dd4fb6dcc2298f0e7b17b8e1e'

SELECT or2.order_id,
	   COUNT(or2.order_id) 
FROM order_reviews or2  
GROUP BY or2.order_id 
HAVING COUNT(or2.order_id) > 1 

 /*order_reviews nao tem chave primaria. Por algum motivo, a mesma review pode ter mais de
 um pedido para clientes diferentes. Alem de todos os clientes referentes a uma review 
 criarem ela no mesmo momento do mesmo dia-mes-ano.*/

-- tabela orders 

SELECT COUNT(o.order_id) 
FROM orders o  
GROUP BY o.order_id  
HAVING COUNT(o.order_id) > 1 

/* O resultado da query acima é vazio, indicando que não há duplicidade de order_id*/

SELECT o.order_id,
	   COUNT(o.order_id) 
FROM orders o LEFT JOIN order_items oi  ON (o.order_id  = oi.order_id)
GROUP BY o.order_id 
HAVING COUNT(o.order_id) > 1 

SELECT *
FROM orders o LEFT JOIN order_items oi  ON (o.order_id  = oi.order_id)
WHERE o.order_id = '00143d0f86d6fbd9f9b38ab440ac16f5'

/*analisando a tabela orders e order_items percebe-se que a coluna que difere as linhas
é a order_item_id. Podendo haver o mesmo produto em quantidades maiores que 1. */

-- tabela product_category_name

SELECT COUNT(pcn.product_category_name) 
FROM product_category_name pcn 
GROUP BY pcn.product_category_name 
HAVING COUNT(product_category_name) > 1 

SELECT COUNT(DISTINCT pcn.product_category_name )
FROM product_category_name pcn 

SELECT COUNT (*)
FROM product_category_name pcn 

-- tabela sellers 

SELECT COUNT(s.seller_id) 
FROM sellers s 
GROUP BY s.seller_id 
HAVING COUNT(s.seller_id) > 1 

/* O resultado da query acima é vazio, indicando que não há duplicidade de seller_id*/

SELECT s.seller_id,
	   COUNT(s.seller_id) 
FROM sellers s LEFT JOIN order_items oi ON (s.seller_id = oi.seller_id)
GROUP BY s.seller_id 
HAVING COUNT(s.seller_id) > 1 

SELECT DISTINCT oi.order_id,
	   oi.product_id
FROM sellers s LEFT JOIN order_items oi ON (s.seller_id = oi.seller_id)
WHERE s.seller_id = '00720abe85ba0859807595bbf045a33b'

/*o mesmo vendedor pode participar de pedidos diferentes. Caso for o mesmo pedido
o order_item_id difere. */